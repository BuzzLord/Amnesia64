--- deferred_edge_smooth_frag.glsl	2021-05-15 13:57:28.576645100 -0600
+++ deferred_2d_edge_smooth_frag.glsl	2021-06-13 17:39:18.624094500 -0600
@@ -5,46 +5,45 @@
 ////////////////////////////////////////////////////////
 #version 120
 
-#extension GL_ARB_texture_rectangle : enable
-
 //---------------------------------------------------------
 
 uniform float afFarPlane;
+uniform vec2 avInvScreenSize;
 
-uniform sampler2DRect screenTexture;
+uniform sampler2D screenTexture;
 @define sampler_screenTexture 0
 
-uniform sampler2DRect depthTexture;
+uniform sampler2D depthTexture;
 @define sampler_depthTexture 1
 
-uniform sampler2DRect normalTexture;
+uniform sampler2D normalTexture;
 @define sampler_normalTexture 2
 
 void main()
 {
-	float fD = 1.0;
-	vec2 vScreenPos = gl_FragCoord.xy;
+	vec2 fD = avInvScreenSize;
+	vec2 vScreenPos = gl_FragCoord.xy * avInvScreenSize;
 		
 	//////////////////
 	// Check normal discontinuity
-	vec3 vCoreNormal = texture2DRect(normalTexture, gl_FragCoord.xy).xyz*2.0-1.0;
+	vec3 vCoreNormal = texture2D(normalTexture, vScreenPos).xyz*2.0-1.0;
 	vec4 vNormalDotCore;
-	vNormalDotCore.x = dot( vCoreNormal, texture2DRect(normalTexture, vScreenPos + vec2(0.0,fD) ).xyz*2.0-1.0 );
-	vNormalDotCore.y = dot( vCoreNormal, texture2DRect(normalTexture, vScreenPos + vec2(0.0,-fD) ).xyz*2.0-1.0 );
-	vNormalDotCore.z = dot( vCoreNormal, texture2DRect(normalTexture, vScreenPos + vec2(fD,0.0) ).xyz*2.0-1.0 );
-	vNormalDotCore.w = dot( vCoreNormal, texture2DRect(normalTexture, vScreenPos + vec2(-fD,0.0) ).xyz*2.0-1.0 );
+	vNormalDotCore.x = dot( vCoreNormal, texture2D(normalTexture, vScreenPos + vec2(0.0,fD.y) ).xyz*2.0-1.0 );
+	vNormalDotCore.y = dot( vCoreNormal, texture2D(normalTexture, vScreenPos + vec2(0.0,-fD.y) ).xyz*2.0-1.0 );
+	vNormalDotCore.z = dot( vCoreNormal, texture2D(normalTexture, vScreenPos + vec2(fD.x,0.0) ).xyz*2.0-1.0 );
+	vNormalDotCore.w = dot( vCoreNormal, texture2D(normalTexture, vScreenPos + vec2(-fD.x,0.0) ).xyz*2.0-1.0 );
 	vNormalDotCore = step(0.0, vNormalDotCore - vec4(0.8)); //Negate the limit for minimum dot product.
 	
 	float fNormalT = 1.0 - max( dot( vNormalDotCore, vec4(0.25) ), 0.0);
 	
 	//////////////////
 	// Check depth discontinuity
-	float fCoreDepth = texture2DRect(depthTexture, gl_FragCoord.xy).x;
+	float fCoreDepth = texture2D(depthTexture, vScreenPos).x;
 	vec4 vDepthDiff;
-	vDepthDiff.x  = texture2DRect(depthTexture, vScreenPos + vec2(0.0,fD) ).x + texture2DRect(depthTexture, vScreenPos + vec2(0.0,-fD)).x;
-	vDepthDiff.y  = texture2DRect(depthTexture, vScreenPos + vec2(fD,0.0) ).x + texture2DRect(depthTexture, vScreenPos + vec2(-fD,0.0)).x;
-	vDepthDiff.z  = texture2DRect(depthTexture, vScreenPos + vec2(fD,fD) ).x + texture2DRect(depthTexture, vScreenPos + vec2(-fD,-fD)).x;
-	vDepthDiff.w  = texture2DRect(depthTexture, vScreenPos + vec2(fD,-fD) ).x + texture2DRect(depthTexture, vScreenPos + vec2(fD,-fD)).x;
+	vDepthDiff.x  = texture2D(depthTexture, vScreenPos + vec2(0.0,fD.y) ).x + texture2D(depthTexture, vScreenPos + vec2(0.0,-fD.y)).x;
+	vDepthDiff.y  = texture2D(depthTexture, vScreenPos + vec2(fD.x,0.0) ).x + texture2D(depthTexture, vScreenPos + vec2(-fD.x,0.0)).x;
+	vDepthDiff.z  = texture2D(depthTexture, vScreenPos + vec2(fD.x,fD.y) ).x + texture2D(depthTexture, vScreenPos + vec2(-fD.x,-fD.y)).x;
+	vDepthDiff.w  = texture2D(depthTexture, vScreenPos + vec2(fD.x,-fD.y) ).x + texture2D(depthTexture, vScreenPos + vec2(fD.x,-fD.y)).x;
 	vDepthDiff = abs( vec4(2*fCoreDepth) - vDepthDiff )*afFarPlane - vec4(0.5); //negate limit value for minum depth.
 	vDepthDiff = step(0.0, vDepthDiff);
 	
@@ -54,11 +53,11 @@
 	// Smooth at screen pos
 	float fT = fDepthT*0.5 + fNormalT*0.5;
 	
-	vec3 vColor = texture2DRect(screenTexture, vScreenPos).xyz * (1.0 - fT);
-	vColor += texture2DRect(screenTexture, vScreenPos + vec2(0.0,fD) ).xyz * fT;
-	vColor += texture2DRect(screenTexture, vScreenPos + vec2(0.0,-fD) ).xyz * fT;
-	vColor += texture2DRect(screenTexture, vScreenPos + vec2(fD,0.0) ).xyz * fT;
-	vColor += texture2DRect(screenTexture, vScreenPos + vec2(-fD,0.0) ).xyz * fT;
+	vec3 vColor = texture2D(screenTexture, vScreenPos).xyz * (1.0 - fT);
+	vColor += texture2D(screenTexture, vScreenPos + vec2(0.0,fD.y) ).xyz * fT;
+	vColor += texture2D(screenTexture, vScreenPos + vec2(0.0,-fD.y) ).xyz * fT;
+	vColor += texture2D(screenTexture, vScreenPos + vec2(fD.x,0.0) ).xyz * fT;
+	vColor += texture2D(screenTexture, vScreenPos + vec2(-fD.x,0.0) ).xyz * fT;
 	
 	vColor *= 1.0 / ((1.0 - fT) + fT*4.0);	
 	
